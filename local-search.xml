<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>score_based_diffusion解读</title>
    <link href="/2024/12/28/score-based-diffusion%E8%A7%A3%E8%AF%BB/"/>
    <url>/2024/12/28/score-based-diffusion%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>attention map可视化</title>
    <link href="/2024/12/28/attention_map%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2024/12/28/attention_map%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ddpm解读</title>
    <link href="/2024/12/28/ddpm%E8%A7%A3%E8%AF%BB/"/>
    <url>/2024/12/28/ddpm%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>flow matching技术解读</title>
    <link href="/2024/12/28/flow_matching%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/"/>
    <url>/2024/12/28/flow_matching%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>flux代码阅读</title>
    <link href="/2024/12/28/flux%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2024/12/28/flux%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>张量在内存中的存储(reshape/permute操作理解)</title>
    <link href="/2024/12/28/%E5%BC%A0%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <url>/2024/12/28/%E5%BC%A0%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>在阅读flux代码的时候，看到这段处理latent的代码有些懵逼，追根溯源就是自己对于pytorch Tensor数据组织的方式理解不透彻，因此写下这篇博客开云破雾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_pack_latents</span>(<span class="hljs-params">latents, batch_size, num_channels_latents, height, width</span>):<br>    latents = latents.view(batch_size, num_channels_latents, height // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, width // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>    latents = latents.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>    latents = latents.reshape(batch_size, (height // <span class="hljs-number">2</span>) * (width // <span class="hljs-number">2</span>), num_channels_latents * <span class="hljs-number">4</span>)<br><br>    <span class="hljs-keyword">return</span> latents<br></code></pre></td></tr></table></figure><p>在底层实现中，PyTorch 中的张量（Tensor）实际上是以<strong>一维的连续内存块</strong>存储的，只是通过<strong>不同的 stride 来控制数据在内存中的访问顺序</strong>。我习惯从右往左去看待张量，因此我说的层的顺序是从右往左的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pythoh">Example.1：Tensor A.shape: (2, 3, 4)<br>视图：<br>[[[0, 1, 2, 3],   // 第一个 batch, 第 1 行<br> [4, 5, 6, 7],   // 第一个 batch, 第 2 行<br> [8, 9, 10, 11]], // 第一个 batch, 第 3 行<br> [[12, 13, 14, 15],  // 第二个 batch, 第 1 行<br> [16, 17, 18, 19],  // 第二个 batch, 第 2 行<br> [20, 21, 22, 23]]]  // 第二个 batch, 第 3 行<br><br>内存中的数据（按行主序排列）：<br>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]<br></code></pre></td></tr></table></figure><ul><li>stride[2] &#x3D; 1（最里层的stride都是1）代表最里层每个元素是紧邻的，例如0马上就接着1然后是2：<br>0,1,2,3,…</li><li>stride[1] &#x3D; A.shape[2] &#x3D; 4，代表每相邻4个元素是一组 ，例如0,1,2,3四个元素是一组，此时4，5，6，7又是新的一组:<br>[0,1,2,3], [4,5,6,7], …</li><li>stride[0] &#x3D; A.shape[2]*A.shape[1] &#x3D; 3*4，代表每相邻12个元素是一个更大的组，因此0-11这12个元素会形成最外层的大组:<br>[ [0,1,2,3], [4,5,6,7], [8,9,10,11] ], …</li></ul><p>由此<strong>总结stride的规律</strong>：</p><ul><li>对于有N个维度的Tensor A, $$ stride[i] &#x3D; \prod_{k&#x3D;i+1}^{N-1} A.shape[k] \text{ for }  i &lt; N-1 \quad\text{and}\quad stride[N-1]&#x3D;1$$<br> 我们可以把print出来的Tensor<strong>从上到下，从左往右展平成一维向量</strong>， 他的张量视图就是根据上述得到的。</li></ul><p>理解了Tensor数据的组织方法，最重要的作用就是可以<strong>推导出reshape(),view()这俩操作后新的数据视图</strong>(注意没有permute)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">Example<span class="hljs-number">.2</span>: 对于<span class="hljs-number">1</span>中的Tensor A (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)，如果执行A.view(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)会是什么样子?<br><br>按照上述分析，首先把A展平成一维：<br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>]<br><br>引用stride规则：<br>stride[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span><br>stride[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>，得到[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],...<br>stride[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>*<span class="hljs-number">2</span> = <span class="hljs-number">6</span>，得到[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]], [[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]],...<br>stride[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>*<span class="hljs-number">2</span>*<span class="hljs-number">2</span> = <span class="hljs-number">12</span>，得到[[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],[[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]]], [[[<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>]],[[<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>],[<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>]]]<br><br>于是变换后的最终结果为:<br>[[[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<br>[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],<br>[[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],<br>[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]]], <br>[[[<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>],<br>[<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>]],<br>[[<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>],<br>[<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>]]]]<br><br>在pytorch中代码验证，结果相同:<br><span class="hljs-keyword">import</span> torch<br>    A = torch.arange(<span class="hljs-number">24</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(A)<br>    A = A.reshape(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(A)<br>tensor([[[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>],<br>          [ <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>]],<br><br>         [[ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>],<br>          [ <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]]],<br><br><br>        [[[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>],<br>          [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>]],<br><br>         [[<span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>],<br>          [<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]]])    <br></code></pre></td></tr></table></figure><p>上述的讨论其实就是view()和reshape()操作的原理，因此对于只含view和reshape的操作，<strong>不管中间维度怎么变换，只要输入相同，且输出的维度相同最后的结果就是一样的</strong></p><p>对于<strong>permute()</strong> 操作，他的原理和前两个不同，举一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python">有一个<span class="hljs-number">5</span>维Tensor A，A.shape = (<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)，假设原来A中的元素A[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>][<span class="hljs-number">5</span>][<span class="hljs-number">6</span>][<span class="hljs-number">7</span>] = b，<br>进行A.permute(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)后，A[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>][<span class="hljs-number">5</span>][<span class="hljs-number">6</span>][<span class="hljs-number">7</span>]会被映射到A[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>][<span class="hljs-number">7</span>][<span class="hljs-number">4</span>][<span class="hljs-number">6</span>]，<br>所以permute后A[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>][<span class="hljs-number">7</span>][<span class="hljs-number">4</span>][<span class="hljs-number">6</span>] = b。说到底就是每个元素的索引按着permute的方式对应变换位置。<br><br>更重要的理解方式就是stride的变换，具体来说原始A的stride也会按照变换到permute后的A的stride上：<br><br><span class="hljs-keyword">import</span> torch<br>x = torch.arange(<span class="hljs-number">24</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 的步幅:&quot;</span>, x.stride())  <span class="hljs-comment"># 输出: (12, 4, 1)</span><br><span class="hljs-built_in">print</span>(x)<br><br>y = x.permute(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 新形状为 (4, 2, 3)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Permute 后的张量 y 的形状:&quot;</span>, y.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y 的步幅:&quot;</span>, y.stride())  <span class="hljs-comment"># 输出: (1, 12, 4)</span><br><span class="hljs-built_in">print</span>(y)<br><br>输出：<br>x 的步幅: (<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>tensor([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>         [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>         [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],<br><br>        [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],<br>         [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>         [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])<br>Permute 后的张量 y 的形状: torch.Size([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y 的步幅: (<span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>)<br>tensor([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">8</span>],<br>         [<span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>]],<br><br>        [[ <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">9</span>],<br>         [<span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">21</span>]],<br><br>        [[ <span class="hljs-number">2</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>],<br>         [<span class="hljs-number">14</span>, <span class="hljs-number">18</span>, <span class="hljs-number">22</span>]],<br><br>        [[ <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>],<br>         [<span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>]]])<br><br>进一步的对于上面这个例子permute后的Tensor按照最开始讲的，展开成一维不就是[<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,...,<span class="hljs-number">23</span>]吗，那我能不能用view改变一下形状呢?<br>例如y.view(<span class="hljs-number">2</span>,<span class="hljs-number">12</span>)不就返回[[<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">20</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">21</span>], [...]]了吗?<br>实际上由于y = x.permute()返回的只是原来x的新视图，x在内存中的物理存储没有改变还是[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,...]，想要把y展平后view会报错：<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/home/ganzhaoxing/RAG-Diffusion/test_reshape.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    y.view(<span class="hljs-number">2</span>,<span class="hljs-number">12</span>)<br>RuntimeError: view size <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> compatible <span class="hljs-keyword">with</span> <span class="hljs-built_in">input</span> tensors size <span class="hljs-keyword">and</span> stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.         <br><br>从这个报错信息可以猜测，pytorch实现permute应该采用的是stride变换的观点，例如shape = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)的stride本来是(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>), <br>permute(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)后，相对于x的物理存储，stride变为 (<span class="hljs-number">1</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>) != (<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)因此判断不连续。<br><br>解决方案：需要用contiguous()函数把y对应的视图在实际物理存储上变得连续才能用view，或者直接使用reshape函数也可以(相当于contiguous + view)。<br></code></pre></td></tr></table></figure><p>现在我们彻底理解了Tensor数据组织和形状变换的原理，让我们重新回到开头flux的源码部分进行解读：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python">原始输入的latents.shape = (batch_size, num_channels_latents, height, width)<br>第一句代码：latents = latents.view(batch_size, num_channels_latents, height // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, width // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>) <br>仅仅改变了最后(height,width)这两个维度，为了演示考虑(C,H,W)维度：<br>original latent = <br>[<span class="hljs-comment">#shape = (2,2,4)</span><br> [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],<br>  [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]],<br><br> [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>],<br>  [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]]<br>]<br>after view, latent =<br>[<span class="hljs-comment">#shape = (2,1,2,2,2)</span><br>    [<br>     [[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<br>       [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]],<br><br>      [[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>       [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]]]<br>              ],<br><br>    [<br>     [[[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>],<br>       [<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]],<br><br>      [[<span class="hljs-number">13</span>,<span class="hljs-number">14</span>],<br>       [<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]]]<br>               ] <br>]<br><br>第二句代码：latents = latents.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)执行后把latents变成<br>(batch_size, height // <span class="hljs-number">2</span>, width // <span class="hljs-number">2</span>, num_channels_latents, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)，之所以要这样做是为了把，<br>不同channel对应的同一个<span class="hljs-number">2</span>*<span class="hljs-number">2</span>的区域放在一起。<br><br>第三句代码：latents = latents.reshape(batch_size, (height // <span class="hljs-number">2</span>) * (width // <span class="hljs-number">2</span>), num_channels_latents * <span class="hljs-number">4</span>) 就是最后整合一下，合并一下维度。<br><br>用代码可视化这个过程，忽略batch维度：<br><br><span class="hljs-keyword">import</span> torch<br>x = torch.arange(<span class="hljs-number">32</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 的步幅:&quot;</span>, x.stride())  <br><span class="hljs-built_in">print</span>(x)<br>y = x.view(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y 的步幅:&quot;</span>, y.stride()) <br><span class="hljs-built_in">print</span>(y)<br>y = y.permute(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y 的步幅:&quot;</span>, y.stride())  <br><span class="hljs-built_in">print</span>(y)<br>y = y.reshape(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y 的步幅:&quot;</span>, y.stride())  <br><span class="hljs-built_in">print</span>(y)<br><br>x 的步幅: (<span class="hljs-number">16</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>tensor([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>         [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>         [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>],<br>         [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]],<br><br>        [[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>         [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>],<br>         [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>],<br>         [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>]]])<br>y 的步幅: (<span class="hljs-number">16</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>tensor([[[[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],<br>           [ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>]],<br><br>          [[ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],<br>           [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>]]],<br><br><br>         [[[ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],<br>           [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],<br><br>          [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>],<br>           [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>]]]],<br><br><br><br>        [[[[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>],<br>           [<span class="hljs-number">18</span>, <span class="hljs-number">19</span>]],<br><br>          [[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>],<br>           [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]],<br><br><br>         [[[<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],<br>           [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>]],<br><br>          [[<span class="hljs-number">28</span>, <span class="hljs-number">29</span>],<br>           [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>]]]]])<br>y 的步幅: (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>tensor([[[[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],<br>           [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>]],<br><br>          [[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>],<br>           [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>]]],<br><br><br>         [[[ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>           [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>]],<br><br>          [[<span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>           [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]]],<br><br><br><br>        [[[[ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],<br>           [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>]],<br><br>          [[<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],<br>           [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>]]],<br><br><br>         [[[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>],<br>           [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>]],<br><br>          [[<span class="hljs-number">26</span>, <span class="hljs-number">27</span>],<br>           [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>]]]]])<br>y 的步幅: (<span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>tensor([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],<br>         [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>]],<br><br>        [[ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>         [<span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]],<br><br>        [[ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>],<br>         [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>]],<br><br>        [[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],<br>         [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>]]])<br><br>注意每一步的逻辑，我们是先想把tensor变换成后面的样子，根据这个样子我们能推导出对应的stride。<br>于是根据新stride和旧stride的变换关系，推导出permute、view、reshape的关系。注意view和reshape是把输入当做从左到右从上到下的一维连续变量进行变换。         <br></code></pre></td></tr></table></figure><p>相关博客：<a href="https://blog.csdn.net/qq_43391414/article/details/120798955">https://blog.csdn.net/qq_43391414/article/details/120798955</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小记</title>
    <link href="/2024/12/27/hello-world/"/>
    <url>/2024/12/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>最近在学习的时候总是会害怕过一段时间就忘记，于是有很强烈的去做个人博客的想法，接下来我将在这个博客记录一些日常学习的心得，以免往后遗忘。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
